let io = use "std/io";
let arraylist = use "std/containers/arraylist";
let ranges = use "std/ranges";

// basic usage
let closure = func(x) {
    let someNumber = 5;
    return func(y) {
        io::println("inside closure", someNumber);
        return x + y;
    };
};

closure(1)(2);

// here's something we call a syntactic sugar
// create an array list first

let arr = arraylist::ArrayList(typing::Int)::new();
for (let i = 0; i < 10; i += 1) {
    arr.push(i);
}

// create a range based on the array
// it provides some functional operations
let range = ranges::Range(arraylist::ArrayList(typing::Int))::from(arr);
io::println("ranges test:", 
    range.map @ func(x) {
        return x * 2; 
    }.reduce(0) @ func(x, y) { 
        return x + y; 
    }
);

// here, range.map is a method. however, by adding an '@' symbol, 
// we can pass a function as an argument directly.
// you can still write the parentheses,
// like in .reduce, as we need to pass in an additional initial value.

// another usage is about inplicit receivers, 
// like those we can see in Ruby or Kotlin.

let MyType = type { 
    field x = typing::Int;
    field y = typing::Int;

    func new(fn) {
        let obj = MyType {};
        fn(obj);
        return obj;
    }

    method op(self, fn) {
        return self.x + self.y + fn(self);
    }
};

io::println(MyType::new @ {
    .x = 5;
    .y = 10;
}.op @ {
    return 5;
});

// in 'new' static method, we pass in a function,
// which accept one parameter 'self'.
// here, if we omit the func (...) statement, it will be inferred.
// so this is equivalent to @ func (self) { ... }
// and inside that closure, we can access the fields of the object.
// .x and .y is equivalent to self.x and self.y,
// where the prefix 'self' is inferred.
// if you don't like 'self', you can fullly write out the function signature,
// and explicitly specify the parameter name, and access members like this (if you use 'this'):
// this.x and this.y. 
// note that in this case 'this' cannot be inferred thus cannot be omitted.

// principles of context capture:
// 1. a method, no matter static or instance, will capture the context of the type it belongs to.
// 2. type scope and module scope is penetratable in caputuring.
// 3. closure can capture the context of the place where it is defined, and suits the above mentioned principles.
//    however, it cannot penetrate the calling stack frames.
//    but its context derives from the context of the place where it is defined.
// 4. when an identifier is requested, it will first look through all penetratable scopes and stack frames.
//    if it cannot find the identifier, it will look through the context,
//    then the global scope. if not found, an error will be thrown.