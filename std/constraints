func __builtin_constraints_get_constraints();

let getConstraints = __builtin_constraints_get_constraints;

func satisfy(typeInfo, ruleInfo) {
    let constraints = getConstraints(ruleInfo);
    let size = constraints.size();
    let isSatisfied = true;

    for (let i = 0; i < size; i += 1) {
        isSatisfied = isSatisfied && constraints[i](typeInfo);
    }

    return isSatisfied;
}

func __builtin_constraints_has_method();
func __builtin_constraints_has_static_method();
func __builtin_constraints_has_field();

func hasMethod(identifier) {
    return func(T) {
        return __builtin_constraints_has_method(T, identifier);
    };
}

func hasStaticMethod(identifier) {
    return func(T) {
        return __builtin_constraints_has_static_method(T, identifier);
    };
}

func hasField(identifier) {
    return func(T) {
        return __builtin_constraints_has_field(T, identifier);
    };
}
